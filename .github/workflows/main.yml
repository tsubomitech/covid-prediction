# This is a basic workflow to help you get started with Actions
name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [master]
    paths-ignore:
      - "**.md"
      - ".gitignore"
      - "Makefile"
      - "scripts"
      - "docs"
  pull_request:
    branches: [master]
    paths-ignore:
      - "**.md"
      - ".gitignore"
      - "Makefile"
      - "scripts"
      - "docs"

env:
  PROJECT_ID: ${{ secrets.RUN_PROJECT }}
  RUN_REGION: us-central1
  CLOUDSDK_CORE_DISABLE_PROMPTS: 1 # same as --quiet
  API_SERVICE_NAME: covid-prediction-api
  UI_SERVICE_NAME: covid-prediction-ui

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-ui:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2.4.2
        id: filter
        with:
          filters: |
            frontend:
              - 'frontend/**/*'
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        if: steps.filter.outputs.frontend == 'true'
        with:
          version: "299.0.0"
          service_account_key: ${{ secrets.RUN_SA_KEY }}
          project_id: ${{ secrets.RUN_PROJECT }}
      - name: Build UI
        if: steps.filter.outputs.frontend == 'true'
        run: |-
          cd frontend
          gcloud config set builds/use_kaniko True
          gcloud builds submit \
            --tag "gcr.io/$PROJECT_ID/$UI_SERVICE_NAME:$GITHUB_SHA" \
            .

  build-api:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2.4.2
        id: filter
        with:
          filters: |
            backend:
              - 'backend/**/*'
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        if: steps.filter.outputs.backend == 'true'
        with:
          version: "299.0.0"
          service_account_key: ${{ secrets.RUN_SA_KEY }}
          project_id: ${{ secrets.RUN_PROJECT }}
      - name: Build API
        if: steps.filter.outputs.backend == 'true'
        run: |-
          cd backend
          # using jib means we don't need docker layer caching
          gcloud config set builds/use_kaniko False
          gcloud builds submit \
            --config ./cloudbuild.yaml \
            --substitutions=_IMAGE_NAME="$API_SERVICE_NAME",_COMMIT_SHA="$GITHUB_SHA" \
            .
  deploy-ui:
    needs: build-ui
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2.4.2
        id: filter
        with:
          filters: |
            frontend:
              - 'frontend/**/*'
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        if: steps.filter.outputs.frontend == 'true'
        with:
          version: "299.0.0"
          service_account_key: ${{ secrets.RUN_SA_KEY }}
          project_id: ${{ secrets.RUN_PROJECT }}
      - name: Deploy UI
        if: steps.filter.outputs.frontend == 'true'
        run: |-
          export API_URL=$(gcloud run services describe --platform=managed "$API_SERVICE_NAME" --region="$RUN_REGION" | grep -i traffic | awk '{print $2}')
          gcloud run deploy "$UI_SERVICE_NAME" \
            --region "$RUN_REGION" \
            --image "gcr.io/$PROJECT_ID/$UI_SERVICE_NAME:$GITHUB_SHA" \
            --platform "managed" \
            --allow-unauthenticated \
            --port=3000 \
            --max-instances=10 \
            --set-env-vars="API_URL=$API_URL,GOOGLE_CLOUD_RUN=yes" \
            --memory=128Mi
  deploy-api:
    needs: build-api
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2.4.2
        id: filter
        with:
          filters: |
            backend:
              - 'backend/**/*'
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        if: steps.filter.outputs.backend == 'true'
        with:
          version: "299.0.0"
          service_account_key: ${{ secrets.RUN_SA_KEY }}
          project_id: ${{ secrets.RUN_PROJECT }}
      - name: Deploy API
        if: steps.filter.outputs.backend == 'true'
        run: |-
          gcloud run deploy "$API_SERVICE_NAME" \
            --region "$RUN_REGION" \
            --image "gcr.io/$PROJECT_ID/$API_SERVICE_NAME:$GITHUB_SHA" \
            --platform "managed" \
            --no-allow-unauthenticated \
            --port=8080 \
            --max-instances=10 \
            --memory=512Mi \
            --cpu=1
      - name: Add IAM policy to allow service to service communication
        if: steps.filter.outputs.backend == 'true'
        run: |-
          export SERVICE_NAME="$API_SERVICE_NAME"
          export CALLING_SERVICE_IDENTITY=155687937861-compute@developer.gserviceaccount.com
          gcloud run services add-iam-policy-binding $SERVICE_NAME \
            --member="serviceAccount:${CALLING_SERVICE_IDENTITY}" \
            --role='roles/run.invoker' \
            --platform=managed \
            --region="$RUN_REGION"
